{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyM1mOXPFoU5Tm6MQPfSKBZF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["write a python program to implement AND function using perceptron"],"metadata":{"id":"KJWg57p-06Tj"}},{"cell_type":"code","source":["import numpy as np\n","\n","class Perceptron:\n","    def __init__(self, input_size, learning_rate=0.1, epochs=100):\n","        self.W = np.zeros(input_size + 1)  # +1 for the bias term\n","        self.learning_rate = learning_rate\n","        self.epochs = epochs\n","\n","    def activation_function(self, x):\n","        return 1 if x >= 0 else 0\n","\n","    def predict(self, x):\n","        z = self.W.T.dot(np.insert(x, 0, 1))  # Insert bias term\n","        return self.activation_function(z)\n","\n","    def fit(self, X, d):\n","        for epoch in range(self.epochs):\n","            for i in range(d.shape[0]):\n","                x_i = np.insert(X[i], 0, 1)  # Insert bias term\n","                y_i = self.predict(X[i])\n","                error = d[i] - y_i\n","                self.W = self.W + self.learning_rate * error * x_i\n","\n","# AND logic function\n","X = np.array([\n","    [0, 0],\n","    [0, 1],\n","    [1, 0],\n","    [1, 1]\n","])\n","\n","d = np.array([0, 0, 0, 1])  # Desired output for AND\n","\n","# Creating perceptron\n","perceptron = Perceptron(input_size=2)\n","perceptron.fit(X, d)\n","\n","# Testing perceptron\n","print(\"Testing AND Perceptron\")\n","for x in X:\n","    print(f\"Input: {x}, Output: {perceptron.predict(x)}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"SKuxe1Ho0861","executionInfo":{"status":"ok","timestamp":1732479554912,"user_tz":-330,"elapsed":511,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"4e1559e6-6fc8-4ebb-8f6a-2e6cc0b8c629"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Testing AND Perceptron\n","Input: [0 0], Output: 0\n","Input: [0 1], Output: 0\n","Input: [1 0], Output: 0\n","Input: [1 1], Output: 1\n"]}]},{"cell_type":"markdown","source":["NOR Gate implementation with binary input and bipolar target using Adaline"],"metadata":{"id":"ZzYGMQBj2hTf"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Define the NOR function inputs and corresponding bipolar outputs\n","inputs = np.array([[0, 0], [0, 1], [1, 0], [1, 1]])\n","outputs = np.array([1, -1, -1, -1])  # Bipolar target\n","\n","# Initialize weights and bias\n","weights = np.zeros(inputs.shape[1])\n","bias = 0.0\n","learning_rate = 0.1\n","epochs = 100\n","\n","# Adaline learning rule\n","for _ in range(epochs):\n","    for i in range(len(inputs)):\n","        linear_output = np.dot(inputs[i], weights) + bias\n","        error = outputs[i] - linear_output\n","        weights += learning_rate * error * inputs[i]\n","        bias += learning_rate * error\n","\n","# Test the Adaline model\n","for i in range(len(inputs)):\n","    linear_output = np.dot(inputs[i], weights) + bias\n","    prediction = 1 if linear_output >= 0 else -1\n","    print(f\"Input: {inputs[i]}, Prediction: {prediction}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"COpzKkPE2jRp","executionInfo":{"status":"ok","timestamp":1732480233497,"user_tz":-330,"elapsed":454,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"a291fa92-0631-4cde-94a1-5c8322a57dda"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input: [0 0], Prediction: 1\n","Input: [0 1], Prediction: -1\n","Input: [1 0], Prediction: -1\n","Input: [1 1], Prediction: -1\n"]}]},{"cell_type":"markdown","source":["XOR gate implementation with bipolar input and bipolar target using Madaline"],"metadata":{"id":"J9Wa7ANf331y"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Define the XOR function inputs and corresponding bipolar outputs\n","inputs = np.array([[1, 1], [1, -1], [-1, 1], [-1, -1]])\n","outputs = np.array([-1, 1, 1, -1])  # Bipolar target\n","\n","# Initialize weights and bias for each Adaline unit\n","weights1 = np.random.rand(2)\n","weights2 = np.random.rand(2)\n","bias1 = np.random.rand()\n","bias2 = np.random.rand()\n","learning_rate = 0.1\n","epochs = 100\n","\n","# Madaline learning rule\n","for _ in range(epochs):\n","    for i in range(len(inputs)):\n","        linear_output1 = np.dot(inputs[i], weights1) + bias1\n","        linear_output2 = np.dot(inputs[i], weights2) + bias2\n","        output1 = 1 if linear_output1 > 0 else -1\n","        output2 = 1 if linear_output2 > 0 else -1\n","\n","        combined_output = 1 if output1 != output2 else -1\n","        error = outputs[i] - combined_output\n","\n","        # Update the weights and bias for both Adalines\n","        if error != 0:\n","            weights1 += learning_rate * error * inputs[i]\n","            bias1 += learning_rate * error\n","            weights2 += learning_rate * error * inputs[i]\n","            bias2 += learning_rate * error\n","\n","# Test the Madaline model\n","for i in range(len(inputs)):\n","    linear_output1 = np.dot(inputs[i], weights1) + bias1\n","    linear_output2 = np.dot(inputs[i], weights2) + bias2\n","    output1 = 1 if linear_output1 > 0 else -1\n","    output2 = 1 if linear_output2 > 0 else -1\n","\n","    combined_output = 1 if output1 != output2 else -1\n","    print(f\"Input: {inputs[i]}, Prediction: {combined_output}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"1XXtMXu94JZ1","executionInfo":{"status":"ok","timestamp":1732480537539,"user_tz":-330,"elapsed":511,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"4c65e14a-4233-4fc2-8491-50e4fa2dedec"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Input: [1 1], Prediction: -1\n","Input: [ 1 -1], Prediction: -1\n","Input: [-1  1], Prediction: 1\n","Input: [-1 -1], Prediction: -1\n"]}]},{"cell_type":"markdown","source":["create a perceptron with appropriate no. of outputs and inputs. train it using fixed increment learning algorithm until no change in weights is required. output the final weights."],"metadata":{"id":"ZCzqquk042Cy"}},{"cell_type":"code","source":["import numpy as np\n","\n","class Perceptron:\n","    def __init__(self, input_size, learning_rate=0.1):\n","        self.weights = np.zeros(input_size + 1)  # +1 for the bias term\n","        self.learning_rate = learning_rate\n","\n","    def activation_function(self, x):\n","        return 1 if x >= 0 else 0\n","\n","    def predict(self, x):\n","        z = np.dot(self.weights[1:], x) + self.weights[0]\n","        return self.activation_function(z)\n","\n","    def train(self, X, y):\n","        weights_changed = True\n","        epoch = 0\n","        while weights_changed:\n","            weights_changed = False\n","            for inputs, label in zip(X, y):\n","                prediction = self.predict(inputs)\n","                if prediction != label:\n","                    error = label - prediction\n","                    self.weights[1:] += self.learning_rate * error * inputs\n","                    self.weights[0] += self.learning_rate * error  # update bias\n","                    weights_changed = True\n","            epoch += 1\n","            print(f\"Epoch {epoch} complete, weights: {self.weights}\")\n","        print(f\"Training complete. Final weights: {self.weights}\")\n","\n","# Example usage\n","# Input data for AND function\n","X = np.array([\n","    [0, 0],\n","    [0, 1],\n","    [1, 0],\n","    [1, 1]\n","])\n","\n","y = np.array([0, 0, 0, 1])  # Target output for AND function\n","\n","# Create perceptron with 2 inputs\n","perceptron = Perceptron(input_size=2)\n","perceptron.train(X, y)\n","\n","# Output final weights\n","print(f\"Final weights after training: {perceptron.weights}\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vzmHRsC65d8S","executionInfo":{"status":"ok","timestamp":1732480966248,"user_tz":-330,"elapsed":437,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"302433ca-54c7-4eed-e422-31db0cd68cb3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Epoch 1 complete, weights: [0.  0.1 0.1]\n","Epoch 2 complete, weights: [-0.1  0.2  0.1]\n","Epoch 3 complete, weights: [-0.2  0.2  0.1]\n","Epoch 4 complete, weights: [-0.2  0.2  0.1]\n","Training complete. Final weights: [-0.2  0.2  0.1]\n","Final weights after training: [-0.2  0.2  0.1]\n"]}]},{"cell_type":"markdown","source":["using back propagation network , find new weights.it is presented with input pattern [0,1] and target output is 1.learning rate is 0.25"],"metadata":{"id":"BVNCK4t86ejR"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Sigmoid activation function\n","def sigmoid(x):\n","    return 1 / (1 + np.exp(-x))\n","\n","# Derivative of sigmoid function\n","def sigmoid_derivative(x):\n","    return x * (1 - x)\n","\n","# Input dataset\n","inputs = np.array([[0, 1]])\n","# Expected output\n","expected_output = np.array([[1]])\n","\n","# Initialize weights and bias\n","weights = np.random.rand(2, 1)\n","bias = np.random.rand(1)\n","learning_rate = 0.25\n","epochs = 10000\n","\n","# Back-propagation algorithm\n","for _ in range(epochs):\n","    # Feedforward\n","    z = np.dot(inputs, weights) + bias\n","    predicted_output = sigmoid(z)\n","\n","    # Backpropagation\n","    error = expected_output - predicted_output\n","    dcost_dpred = error\n","    dpred_dz = sigmoid_derivative(predicted_output)\n","    z_delta = dcost_dpred * dpred_dz\n","\n","    # Update weights and bias\n","    inputs_transposed = inputs.T\n","    weights += learning_rate * np.dot(inputs_transposed, z_delta)\n","    bias += learning_rate * np.sum(z_delta)\n","\n","# Final weights\n","print(\"Final Weights:\", weights)\n","print(\"Final Bias:\", bias)\n","print(\"Predicted Output:\", predicted_output)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oNrT2kRm7K1G","executionInfo":{"status":"ok","timestamp":1732481342139,"user_tz":-330,"elapsed":612,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"1f51f417-2f57-4f67-b505-9b3bb647be99"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Final Weights: [[0.70031334]\n"," [2.21846934]]\n","Final Bias: [2.35724905]\n","Predicted Output: [[0.98980557]]\n"]}]},{"cell_type":"markdown","source":["program to perform union, intersection,and complement operation"],"metadata":{"id":"BqPfSGN68oGS"}},{"cell_type":"markdown","source":["write a python program that asks user to enter two fuzzy sets that computes the resultant fuzzy relation for values upto 10 that are greater than 10"],"metadata":{"id":"j9FyPTbJGFn0"}},{"cell_type":"code","source":["import numpy as np\n","\n","def get_fuzzy_set(name):\n","    fuzzy_set = {}\n","    for i in range(1, 11):\n","        membership_value = float(input(f\"Enter the membership value for {i} in {name}: \"))\n","        fuzzy_set[i] = membership_value\n","    return fuzzy_set\n","\n","def fuzzy_relation(set_a, set_b):\n","    relation = {}\n","    for x in set_a:\n","        if x > 6:\n","            relation[x] = min(set_a[x], set_b[x])\n","    return relation\n","\n","def main():\n","    print(\"Enter the membership values for Fuzzy Set A (values between 0 and 1):\")\n","    fuzzy_set_a = get_fuzzy_set(\"Set A\")\n","\n","    print(\"\\nEnter the membership values for Fuzzy Set B (values between 0 and 1):\")\n","    fuzzy_set_b = get_fuzzy_set(\"Set B\")\n","\n","    result_relation = fuzzy_relation(fuzzy_set_a, fuzzy_set_b)\n","\n","    print(\"\\nThe resultant fuzzy relation for elements greater than 6 is:\")\n","    for x, val in result_relation.items():\n","        print(f\"({x}, {val})\")\n","\n","if __name__ == \"__main__\":\n","    main()"],"metadata":{"id":"5u03VIoCAJiR","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1732533124904,"user_tz":480,"elapsed":65261,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"5bf31599-ae49-4b28-f7c0-7435a9eb0fae"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Enter the membership values for Fuzzy Set A (values between 0 and 1):\n","Enter the membership value for 1 in Set A: 0\n","Enter the membership value for 2 in Set A: 1\n","Enter the membership value for 3 in Set A: 0\n","Enter the membership value for 4 in Set A: 1\n","Enter the membership value for 5 in Set A: 0\n","Enter the membership value for 6 in Set A: 1\n","Enter the membership value for 7 in Set A: 0\n","Enter the membership value for 8 in Set A: 1\n","Enter the membership value for 9 in Set A: 0\n","Enter the membership value for 10 in Set A: 1\n","\n","Enter the membership values for Fuzzy Set B (values between 0 and 1):\n","Enter the membership value for 1 in Set B: 0\n","Enter the membership value for 2 in Set B: 1\n","Enter the membership value for 3 in Set B: 0\n","Enter the membership value for 4 in Set B: 1\n","Enter the membership value for 5 in Set B: 0\n","Enter the membership value for 6 in Set B: 1\n","Enter the membership value for 7 in Set B: 0\n","Enter the membership value for 8 in Set B: 1\n","Enter the membership value for 9 in Set B: 0\n","Enter the membership value for 10 in Set B: 1\n","\n","The resultant fuzzy relation for elements greater than 6 is:\n","(7, 0.0)\n","(8, 1.0)\n","(9, 0.0)\n","(10, 1.0)\n"]}]},{"cell_type":"markdown","source":["genetic algorithm implementation(Initialize population )"],"metadata":{"id":"RbE4nwuGHVcR"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Generate new gene\n","def create_gen(panjang_target):\n","    random_number = np.random.randint(32, 126, size=panjang_target)\n","    gen = ''.join([chr(i) for i in random_number])\n","    return gen\n","\n","# Calculate fitness of gene\n","def calculate_fitness(gen, target, panjang_target):\n","    fitness = 0\n","    for i in range(panjang_target):\n","        if gen[i] == target[i]:\n","            fitness += 1\n","    fitness = (fitness / panjang_target) * 100\n","    return fitness\n","\n","# Create population\n","def create_population(target, max_population, panjang_target):\n","    populasi = {}\n","    for i in range(max_population):\n","        gen = create_gen(panjang_target)\n","        genfitness = calculate_fitness(gen, target, panjang_target)\n","        populasi[gen] = genfitness\n","    return populasi\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    target = \"hello\"\n","    max_population = 100\n","    panjang_target = len(target)\n","\n","    population = create_population(target, max_population, panjang_target)\n","\n","    # Print the generated population and their fitness\n","    for gen, fitness in population.items():\n","        print(f\"Gene: {gen}, Fitness: {fitness:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"JpUtu7w3HZp4","executionInfo":{"status":"ok","timestamp":1732534772920,"user_tz":480,"elapsed":13,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"f51d0a7a-c537-4a46-d844-54edfca21f90"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Gene: 6]RbW, Fitness: 0.00%\n","Gene: SA7H`, Fitness: 0.00%\n","Gene: =1Ms', Fitness: 0.00%\n","Gene: RFI4N, Fitness: 0.00%\n","Gene: Yr O=, Fitness: 0.00%\n","Gene: E3}]], Fitness: 0.00%\n","Gene: ;;^RN, Fitness: 0.00%\n","Gene: 1)j*u, Fitness: 0.00%\n","Gene: *,0n], Fitness: 0.00%\n","Gene: zm#N:, Fitness: 0.00%\n","Gene: A;:$), Fitness: 0.00%\n","Gene: Kmh'/, Fitness: 0.00%\n","Gene: +pk[j, Fitness: 0.00%\n","Gene: KNb}#, Fitness: 0.00%\n","Gene: O0z+9, Fitness: 0.00%\n","Gene: #9:I-, Fitness: 0.00%\n","Gene: w@7uR, Fitness: 0.00%\n","Gene: |WK.(, Fitness: 0.00%\n","Gene: 8e$7i, Fitness: 20.00%\n","Gene: Cho'Y, Fitness: 0.00%\n","Gene: r|9*J, Fitness: 0.00%\n","Gene: |F3.a, Fitness: 0.00%\n","Gene: +Dap5, Fitness: 0.00%\n","Gene: qs8+\\, Fitness: 0.00%\n","Gene: !neww, Fitness: 0.00%\n","Gene: o\\RN*, Fitness: 0.00%\n","Gene: [\"xh[, Fitness: 0.00%\n","Gene: 8|Ww>, Fitness: 0.00%\n","Gene: vlC2|, Fitness: 0.00%\n","Gene: p!$en, Fitness: 0.00%\n","Gene: ]|l,\", Fitness: 20.00%\n","Gene: P^8bR, Fitness: 0.00%\n","Gene: |Jz?\\, Fitness: 0.00%\n","Gene: W@UB/, Fitness: 0.00%\n","Gene: .9-l7, Fitness: 20.00%\n","Gene: |BZnm, Fitness: 0.00%\n","Gene: bRC{3, Fitness: 0.00%\n","Gene: w:81Z, Fitness: 0.00%\n","Gene: ;Jp;K, Fitness: 0.00%\n","Gene: ^2+Pj, Fitness: 0.00%\n","Gene: Y|%g7, Fitness: 0.00%\n","Gene: K=\\un, Fitness: 0.00%\n","Gene: /20SY, Fitness: 0.00%\n","Gene: KA_Cc, Fitness: 0.00%\n","Gene: ]Ij}b, Fitness: 0.00%\n","Gene: k5Sa9, Fitness: 0.00%\n","Gene: ;/Nf@, Fitness: 0.00%\n","Gene: :>K$k, Fitness: 0.00%\n","Gene: z}tzJ, Fitness: 0.00%\n","Gene: n-j5?, Fitness: 0.00%\n","Gene: E9u:\", Fitness: 0.00%\n","Gene: @eWqh, Fitness: 20.00%\n","Gene: \\5#2+, Fitness: 0.00%\n","Gene: (Wuv4, Fitness: 0.00%\n","Gene: ,[ShT, Fitness: 0.00%\n","Gene: <8U=<, Fitness: 0.00%\n","Gene: JPt+`, Fitness: 0.00%\n","Gene: U=/TT, Fitness: 0.00%\n","Gene: I@g!=, Fitness: 0.00%\n","Gene: tjB[/, Fitness: 0.00%\n","Gene: LrY4O, Fitness: 0.00%\n","Gene: M7,-i, Fitness: 0.00%\n","Gene: W>dM5, Fitness: 0.00%\n","Gene: N39#$, Fitness: 0.00%\n","Gene: B;E$5, Fitness: 0.00%\n","Gene: ;bd@(, Fitness: 0.00%\n","Gene: kCjt&, Fitness: 0.00%\n","Gene: LE`Bz, Fitness: 0.00%\n","Gene: fg_S}, Fitness: 0.00%\n","Gene: /^;]7, Fitness: 0.00%\n","Gene: 'wvNi, Fitness: 0.00%\n","Gene: {%:+S, Fitness: 0.00%\n","Gene: } D\"*, Fitness: 0.00%\n","Gene: %90T:, Fitness: 0.00%\n","Gene: zu{Y=, Fitness: 0.00%\n","Gene: r+apQ, Fitness: 0.00%\n","Gene: x|{@], Fitness: 0.00%\n","Gene: \\D,,U, Fitness: 0.00%\n","Gene: '\\F>8, Fitness: 0.00%\n","Gene: q>S.w, Fitness: 0.00%\n","Gene: <6y=4, Fitness: 0.00%\n","Gene: ;CWi&, Fitness: 0.00%\n","Gene: (gB}Z, Fitness: 0.00%\n","Gene: NyO#1, Fitness: 0.00%\n","Gene: 5\\Y L, Fitness: 0.00%\n","Gene: swP{B, Fitness: 0.00%\n","Gene: fW9H?, Fitness: 0.00%\n","Gene: B&j0+, Fitness: 0.00%\n","Gene: H|^ps, Fitness: 0.00%\n","Gene: 'N-e2, Fitness: 0.00%\n","Gene: M&DUk, Fitness: 0.00%\n","Gene: P ze9, Fitness: 0.00%\n","Gene: m8U&O, Fitness: 0.00%\n","Gene: VVKt1, Fitness: 0.00%\n","Gene: uW^zD, Fitness: 0.00%\n","Gene: Mk9-!, Fitness: 0.00%\n","Gene: +H1 b, Fitness: 0.00%\n","Gene: &plxp, Fitness: 20.00%\n","Gene: moI@k, Fitness: 0.00%\n","Gene: TY)>{, Fitness: 0.00%\n"]}]},{"cell_type":"markdown","source":["selection"],"metadata":{"id":"scQ1YGqTH3Kv"}},{"cell_type":"code","source":["# Selection process\n","def selection(populasi):\n","    pop = dict(populasi)  # Create a copy of the population dictionary\n","    parent = {}\n","    for i in range(2):\n","        gen = max(pop, key=pop.get)  # Select the gene with the highest fitness\n","        genfitness = pop[gen]\n","        parent[gen] = genfitness\n","        if i == 0:\n","            del pop[gen]  # Remove the selected gene for the first iteration to avoid duplicate selection\n","    return parent\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    # Example population\n","    population = {\n","        'abc': 50,\n","        'def': 70,\n","        'ghi': 65,\n","        'jkl': 80\n","    }\n","\n","    # Perform selection\n","    parents = selection(population)\n","\n","    print(\"Selected Parents:\")\n","    for gen, fitness in parents.items():\n","        print(f\"Gene: {gen}, Fitness: {fitness:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"h6OJ6USMH4P-","executionInfo":{"status":"ok","timestamp":1732534859448,"user_tz":480,"elapsed":451,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"ebf7e1db-71f6-41b4-b27e-cc1c966de6c9"},"execution_count":8,"outputs":[{"output_type":"stream","name":"stdout","text":["Selected Parents:\n","Gene: jkl, Fitness: 80.00%\n","Gene: def, Fitness: 70.00%\n"]}]},{"cell_type":"markdown","source":["Crossover"],"metadata":{"id":"PDZYaj9FID9G"}},{"cell_type":"code","source":["# Define parents\n","parent1 = 'abcde12345'\n","parent2 = '12345abcde'\n","\n","# Perform single-point crossover\n","crossover_point = len(parent1) // 2\n","offspring1 = parent1[:crossover_point] + parent2[crossover_point:]\n","offspring2 = parent2[:crossover_point] + parent1[crossover_point:]\n","\n","# Print the results\n","print(\"Parent 1:\", parent1)\n","print(\"Parent 2:\", parent2)\n","print(\"Offspring 1:\", offspring1)\n","print(\"Offspring 2:\", offspring2)\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2t8NoR_WIIse","executionInfo":{"status":"ok","timestamp":1732534912685,"user_tz":480,"elapsed":430,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"08922343-9c17-43bc-a889-d2d45868af71"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stdout","text":["Parent 1: abcde12345\n","Parent 2: 12345abcde\n","Offspring 1: abcdeabcde\n","Offspring 2: 1234512345\n"]}]},{"cell_type":"code","source":["import numpy as np\n","\n","# Function to create new gene\n","def create_gen(panjang_target):\n","    random_number = np.random.randint(32, 126, size=panjang_target)\n","    gen = ''.join([chr(i) for i in random_number])\n","    return gen\n","\n","# Function to calculate fitness of gene\n","def calculate_fitness(gen, target, panjang_target):\n","    fitness = 0\n","    for i in range(panjang_target):\n","        if gen[i] == target[i]:\n","            fitness += 1\n","    fitness = (fitness / panjang_target) * 100\n","    return fitness\n","\n","# Function to create population\n","def create_population(target, max_population, panjang_target):\n","    populasi = {}\n","    for i in range(max_population):\n","        gen = create_gen(panjang_target)\n","        genfitness = calculate_fitness(gen, target, panjang_target)\n","        populasi[gen] = genfitness\n","    return populasi\n","\n","# Selection function\n","def selection(populasi):\n","    pop = dict(populasi)  # Create a copy of the population dictionary\n","    parent = {}\n","    for i in range(2):\n","        gen = max(pop, key=pop.get)  # Select the gene with the highest fitness\n","        genfitness = pop[gen]\n","        parent[gen] = genfitness\n","        if i == 0:\n","            del pop[gen]  # Remove the selected gene for the first iteration to avoid duplicate selection\n","    return parent\n","\n","# Crossover function\n","def crossover(parent, target, panjang_target):\n","    child = {}\n","    cp = round(len(list(parent.keys())[0]) / 2)  # Determine crossover point\n","    parent_list = list(parent.keys())  # Convert parent dictionary keys to list\n","\n","    for i in range(2):\n","        # Perform crossover to generate new child genes\n","        gen = parent_list[i][:cp] + parent_list[1 - i][cp:]\n","        genfitness = calculate_fitness(gen, target, panjang_target)\n","        child[gen] = genfitness\n","\n","    return child\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    target = \"hello\"  # Example target\n","    max_population = 100\n","    panjang_target = len(target)\n","\n","    # Create initial population\n","    population = create_population(target, max_population, panjang_target)\n","\n","    # Perform selection\n","    parents = selection(population)\n","\n","    # Perform crossover\n","    children = crossover(parents, target, panjang_target)\n","\n","    print(\"Children Genes and Fitness:\")\n","    for gen, fitness in children.items():\n","        print(f\"Gene: {gen}, Fitness: {fitness:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"WxXvHbklISX1","executionInfo":{"status":"ok","timestamp":1732534943007,"user_tz":480,"elapsed":432,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"e312c43f-1722-472a-b817-0de426566ea5"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["Children Genes and Fitness:\n","Gene: !(lCM, Fitness: 20.00%\n","Gene: N*<lh, Fitness: 20.00%\n"]}]},{"cell_type":"markdown","source":["ANFIS Model  for parameter Adaptation"],"metadata":{"id":"xibK930eId09"}},{"cell_type":"code","source":["import numpy as np\n","\n","def gaussmf(x, mean, sigma):\n","    return np.exp(-0.5 * ((x - mean) / sigma) ** 2)\n","\n","def predict_anfis(x, rules):\n","    y_pred = np.zeros_like(x)\n","    for i in range(len(rules)):\n","        w = gaussmf(x, rules[i]['mean'], rules[i]['sigma'])\n","        y_pred += rules[i]['coeff'] * w\n","    return y_pred\n","\n","def train_anfis(x, y, num_epochs=10, learning_rate=0.01):\n","    rules = [\n","        {'mean': 2.0, 'sigma': 1.0, 'coeff': 0.0},\n","        {'mean': 8.0, 'sigma': 1.0, 'coeff': 0.0}\n","    ]\n","    for epoch in range(num_epochs):\n","        y_pred = predict_anfis(x, rules)\n","        error = y - y_pred\n","        for i in range(len(rules)):\n","            w = gaussmf(x, rules[i]['mean'], rules[i]['sigma'])\n","            delta_coeff = learning_rate * np.sum(w * error)\n","            rules[i]['coeff'] += delta_coeff\n","    return rules\n","\n","# Generate random data for demonstration\n","np.random.seed(0)\n","x = np.random.rand(100) * 10\n","y = np.sin(x) + np.random.normal(scale=0.1, size=x.shape)\n","\n","# Train the ANFIS model\n","trained_rules = train_anfis(x, y, num_epochs=50, learning_rate=0.1)\n","\n","# Predict using the trained model\n","y_pred = predict_anfis(x, trained_rules)\n","\n","# Print the comparison of actual and predicted values\n","print(\"Actual Values:\", y)\n","print(\"Predicted Values:\", y_pred)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z5b5pgAMIe3M","executionInfo":{"status":"ok","timestamp":1732535006060,"user_tz":480,"elapsed":418,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"6c46b167-5d61-4a87-f7b3-da4fe26e3635"},"execution_count":11,"outputs":[{"output_type":"stream","name":"stdout","text":["Actual Values: [-0.83041379  0.85357806 -0.20621284 -0.89448679 -0.74008257  0.36444128\n"," -0.82603257  0.46760626 -0.31734381 -0.53326634  0.95768151 -0.71609827\n"," -0.54607402  0.26567484  0.68774382  0.83581937  0.2018593   1.06914918\n","  1.01007045  0.70307721 -0.16527418  0.85577159 -1.12228985  1.09575455\n","  0.80833555  0.31012688  0.94923226 -0.09665494 -0.68235035 -0.69612483\n","  0.66269941  1.08437866 -1.07476091 -0.37268302  0.15999397 -0.02638161\n"," -0.06679223 -0.12910059  0.04870545  0.60207692 -0.40045961 -1.05200259\n","  0.6687693   0.69914052  0.30562208  0.39571076  0.81775635  1.14555693\n","  0.05453896 -0.43473864 -0.62603362 -0.89328623 -0.51044961  0.85552552\n","  0.80524084  1.06674887  0.30302579  0.55095238 -0.95918525  0.53287228\n","  0.85069565  0.93684188  0.29312928  1.04570198  1.16130054 -0.4245336\n","  0.8460334   0.93715943  0.73349882  0.7735971  -0.34013843 -0.82833094\n"," -0.41063198 -0.31522436  0.88560895  0.31557682  0.42107543  0.82475639\n","  0.0644703   0.88357156 -0.08803307 -0.64907778  0.69331993  0.60718179\n"," -0.70127374  0.55302958 -0.96779522  0.65272999 -0.3813023   0.16312885\n","  0.0480033   0.41291054  1.05389453  0.70569158  0.14158738  1.03426159\n"," -0.48632557  0.13076826  0.86114029  0.04868543]\n","Predicted Values: [0.03887846 0.60248083 0.12368996 0.03569268 0.0748561  0.26333568\n"," 0.054973   0.56655902 0.22620021 0.16821455 0.86029187 0.02593326\n"," 0.05962261 0.39227757 0.3935936  0.47814501 0.17961804 0.81851582\n"," 0.84289224 0.67560622 0.17511972 0.86321178 0.03242002 0.84703316\n"," 0.64739093 0.23976711 0.77005451 0.30315392 0.02312591 0.09079505\n"," 0.73401771 0.83505733 0.03633385 0.060139   0.17504568 0.16381791\n"," 0.14790204 0.16173784 0.30720643 0.42940156 0.25340113 0.05566187\n"," 0.51118638 0.34037838 0.35537988 0.37390617 0.89920762 0.70227864\n"," 0.46439403 0.23677521 0.06252837 0.05373564 0.14641723 0.55955557\n"," 0.90051245 0.83887033 0.29351962 0.78438849 0.02936908 0.81911325\n"," 0.83108249 0.60502697 0.3075767  0.74682914 0.90353948 0.21786095\n"," 0.84442816 0.53245396 0.80328104 0.52696112 0.18196208 0.02805391\n"," 0.18099535 0.1288142  0.71784266 0.24811082 0.64165851 0.65751946\n"," 0.56950159 0.649787   0.45075301 0.09156292 0.35928239 0.48424612\n"," 0.05774434 0.73005164 0.0236153  0.51515769 0.07092542 0.37421111\n"," 0.44764113 0.35843257 0.71646345 0.60828348 0.60621484 0.89138577\n"," 0.08891431 0.17926032 0.82783941 0.13425097]\n"]}]},{"cell_type":"markdown","source":["Copy of genetic algorithm implementation(Initialize population"],"metadata":{"id":"Fps8tJM3Iy80"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Generate new gene\n","def create_gen(panjang_target):\n","    random_number = np.random.randint(32, 126, size=panjang_target)\n","    gen = ''.join([chr(i) for i in random_number])\n","    return gen\n","\n","# Calculate fitness of gene\n","def calculate_fitness(gen, target, panjang_target):\n","    fitness = 0\n","    for i in range(panjang_target):\n","        if gen[i] == target[i]:\n","            fitness += 1\n","    fitness = (fitness / panjang_target) * 100\n","    return fitness\n","\n","# Create population\n","def create_population(target, max_population, panjang_target):\n","    populasi = {}\n","    for i in range(max_population):\n","        gen = create_gen(panjang_target)\n","        genfitness = calculate_fitness(gen, target, panjang_target)\n","        populasi[gen] = genfitness\n","    return populasi\n","\n","# Example usage\n","if __name__ == \"__main__\":\n","    target = \"hello\"\n","    max_population = 100\n","    panjang_target = len(target)\n","\n","    population = create_population(target, max_population, panjang_target)\n","\n","    # Print the generated population and their fitness\n","    for gen, fitness in population.items():\n","        print(f\"Gene: {gen}, Fitness: {fitness:.2f}%\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ba2C5J15I0Pr","executionInfo":{"status":"ok","timestamp":1732535092485,"user_tz":480,"elapsed":1779,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"f2ac1650-12f4-427b-d3ae-0db6097f0f86"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Gene: s'h]-, Fitness: 0.00%\n","Gene: % (oo, Fitness: 20.00%\n","Gene: U+$G|, Fitness: 0.00%\n","Gene: M:jTQ, Fitness: 0.00%\n","Gene: {S2BS, Fitness: 0.00%\n","Gene: >UZKW, Fitness: 0.00%\n","Gene: 2Mwaf, Fitness: 0.00%\n","Gene: UP[p:, Fitness: 0.00%\n","Gene: CZQiL, Fitness: 0.00%\n","Gene: -fFG(, Fitness: 0.00%\n","Gene: -'p6o, Fitness: 20.00%\n","Gene: y(&qg, Fitness: 0.00%\n","Gene: tyb\\0, Fitness: 0.00%\n","Gene: X78$Q, Fitness: 0.00%\n","Gene: w>V94, Fitness: 0.00%\n","Gene: Y7;=A, Fitness: 0.00%\n","Gene: USv'), Fitness: 0.00%\n","Gene: V sDq, Fitness: 0.00%\n","Gene: 4#Ja4, Fitness: 0.00%\n","Gene: DdpO*, Fitness: 0.00%\n","Gene: {K_?4, Fitness: 0.00%\n","Gene: f)\\{C, Fitness: 0.00%\n","Gene: sl2jK, Fitness: 0.00%\n","Gene: #,Z! , Fitness: 0.00%\n","Gene: G8ZDe, Fitness: 0.00%\n","Gene: &#H\\A, Fitness: 0.00%\n","Gene: <d:Si, Fitness: 0.00%\n","Gene: UeA'h, Fitness: 20.00%\n","Gene: t'cu{, Fitness: 0.00%\n","Gene: ctgs , Fitness: 0.00%\n","Gene: %{>is, Fitness: 0.00%\n","Gene: '5|(K, Fitness: 0.00%\n","Gene: N SFy, Fitness: 0.00%\n","Gene: jws:n, Fitness: 0.00%\n","Gene: @fL[Y, Fitness: 0.00%\n","Gene: RM$Y}, Fitness: 0.00%\n","Gene: {1Cb4, Fitness: 0.00%\n","Gene: MYoD^, Fitness: 0.00%\n","Gene: $m>wC, Fitness: 0.00%\n","Gene: izW:6, Fitness: 0.00%\n","Gene: lozSN, Fitness: 0.00%\n","Gene: p]\\O , Fitness: 0.00%\n","Gene: *k-g&, Fitness: 0.00%\n","Gene: M>/IF, Fitness: 0.00%\n","Gene: UKr'|, Fitness: 0.00%\n","Gene: aIb|n, Fitness: 0.00%\n","Gene: {?}RN, Fitness: 0.00%\n","Gene: }A,pb, Fitness: 0.00%\n","Gene: h*z;X, Fitness: 20.00%\n","Gene: a`exB, Fitness: 0.00%\n","Gene: o#\\EK, Fitness: 0.00%\n","Gene: sxf4&, Fitness: 0.00%\n","Gene: <&b||, Fitness: 0.00%\n","Gene: eiVm5, Fitness: 0.00%\n","Gene: ?qC(9, Fitness: 0.00%\n","Gene: 5Mv09, Fitness: 0.00%\n","Gene: E!%f,, Fitness: 0.00%\n","Gene: zjVn^, Fitness: 0.00%\n","Gene: hgM%O, Fitness: 20.00%\n","Gene: [Jc*Y, Fitness: 0.00%\n","Gene: {y#nr, Fitness: 0.00%\n","Gene: eZ$1e, Fitness: 0.00%\n","Gene: _8#eH, Fitness: 0.00%\n","Gene: DZQW8, Fitness: 0.00%\n","Gene: A2n'U, Fitness: 0.00%\n","Gene: NAq=,, Fitness: 0.00%\n","Gene: N@Bw9, Fitness: 0.00%\n","Gene: NT`li, Fitness: 20.00%\n","Gene: 2$'#P, Fitness: 0.00%\n","Gene: lEPrS, Fitness: 0.00%\n","Gene: QgzQ=, Fitness: 0.00%\n","Gene: #jta4, Fitness: 0.00%\n","Gene: pJ<:w, Fitness: 0.00%\n","Gene: TPb)\", Fitness: 0.00%\n","Gene: yzd*,, Fitness: 0.00%\n","Gene: EG@A:, Fitness: 0.00%\n","Gene: yRxr4, Fitness: 0.00%\n","Gene: <h298, Fitness: 0.00%\n","Gene: G<82c, Fitness: 0.00%\n","Gene: LsMV , Fitness: 0.00%\n","Gene: *c&{Y, Fitness: 0.00%\n","Gene: f3BR4, Fitness: 0.00%\n","Gene: K b,/, Fitness: 0.00%\n","Gene: A7,%F, Fitness: 0.00%\n","Gene: !*&&F, Fitness: 0.00%\n","Gene: kuRS\", Fitness: 0.00%\n","Gene: l=)h%, Fitness: 0.00%\n","Gene: UaKo^, Fitness: 0.00%\n","Gene: lOl52, Fitness: 20.00%\n","Gene: y-|u&, Fitness: 0.00%\n","Gene: PH:>%, Fitness: 0.00%\n","Gene: /_E[p, Fitness: 0.00%\n","Gene: @^*,}, Fitness: 0.00%\n","Gene: `=z63, Fitness: 0.00%\n","Gene: %Ds%|, Fitness: 0.00%\n","Gene: l:s,', Fitness: 0.00%\n","Gene: Tp= w, Fitness: 0.00%\n","Gene: oj#]c, Fitness: 0.00%\n","Gene: 0itX^, Fitness: 0.00%\n","Gene: XP1Y), Fitness: 0.00%\n"]}]},{"cell_type":"markdown","source":["Copy of write a python program for fuzzy neuron for temperature control"],"metadata":{"id":"sp8zl432JSmz"}},{"cell_type":"code","source":["import numpy as np\n","\n","# Fuzzy membership functions\n","def membership_cold(x):\n","    if x <= 20:\n","        return 1.0\n","    elif 20 < x < 25:\n","        return (25 - x) / (25 - 20)\n","    else:\n","        return 0.0\n","\n","def membership_moderate(x):\n","    if 20 < x < 25:\n","        return (x - 20) / (25 - 20)\n","    elif 25 <= x <= 30:\n","        return 1.0\n","    elif 30 < x < 35:\n","        return (35 - x) / (35 - 30)\n","    else:\n","        return 0.0\n","\n","def membership_hot(x):\n","    if 30 <= x <= 35:\n","        return (x - 30) / (35 - 30)\n","    elif x > 35:\n","        return 1.0\n","    else:\n","        return 0.0\n","\n","# Fuzzy inference using \"OR\" operator\n","def fuzzy_or(*args):\n","    return max(args)\n","\n","# Fuzzy inference using \"AND\" operator\n","def fuzzy_and(*args):\n","    return min(args)\n","\n","# Defuzzification using the centroid method\n","def defuzzification(result):\n","    total_area = sum(result)\n","    if total_area == 0:\n","        return None\n","    else:\n","        return sum(i * result[i] for i in range(len(result))) / total_area\n","\n","# Fuzzy neuron for temperature control\n","def fuzzy_neuron(input_temp):\n","    cold_value = membership_cold(input_temp)\n","    moderate_value = membership_moderate(input_temp)\n","    hot_value = membership_hot(input_temp)\n","\n","    # Rule-based fuzzy inference\n","    air_cold = fuzzy_or(fuzzy_and(cold_value, fuzzy_or(fuzzy_and(1, fuzzy_not(moderate_value)), fuzzy_and(1, fuzzy_not(hot_value)))),\n","                        fuzzy_and(moderate_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(hot_value)))))\n","\n","    air_moderate = fuzzy_or(fuzzy_and(moderate_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(hot_value)))),\n","                            fuzzy_and(hot_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(moderate_value)))))\n","\n","    air_hot = fuzzy_or(fuzzy_and(hot_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(moderate_value)))),\n","                       fuzzy_and(cold_value, fuzzy_or(fuzzy_and(1, fuzzy_not(moderate_value)), fuzzy_and(1, fuzzy_not(hot_value)))))\n","\n","    # Defuzzification\n","    result = [0] * 100\n","    for i in range(100):\n","        result[i] = fuzzy_or(air_cold * membership_cold(i),\n","                             air_moderate * membership_moderate(i),\n","                             air_hot * membership_hot(i))\n","\n","    return defuzzification(result)\n","\n","# Helper function for \"NOT\" operator\n","def fuzzy_not(x):\n","    return 1 - x\n","\n","# Main function to demonstrate the fuzzy neuron\n","def main():\n","    input_temp = 25  # Input temperature in degrees Celsius\n","\n","    # Fuzzy inference\n","    air_conditioning = fuzzy_neuron(input_temp)\n","\n","    print(f\"Input Temperature: {input_temp}°C\")\n","    print(f\"Air Conditioning Output: {air_conditioning:.2f}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Ejt8lEGIJT1S","executionInfo":{"status":"ok","timestamp":1732535228661,"user_tz":480,"elapsed":439,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"3c957799-7012-49b9-821a-dade44ed56cb"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["Input Temperature: 25°C\n","Air Conditioning Output: 15.79\n"]}]}]}