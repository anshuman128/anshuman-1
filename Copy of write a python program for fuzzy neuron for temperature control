{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1QzkRLY4YBqqY5TuBVOw5kqkZWPpXLHye","timestamp":1731324892688}],"authorship_tag":"ABX9TyNnGNTONBScrfh4OEZUWuuF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":106},"id":"93ZcUkn07kbA","executionInfo":{"status":"error","timestamp":1731323690299,"user_tz":480,"elapsed":483,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"e5660533-0496-44e3-8f57-eca94b50fae6"},"outputs":[{"output_type":"error","ename":"IndentationError","evalue":"expected an indented block after function definition on line 3 (<ipython-input-1-836f5aa373c0>, line 4)","traceback":["\u001b[0;36m  File \u001b[0;32m\"<ipython-input-1-836f5aa373c0>\"\u001b[0;36m, line \u001b[0;32m4\u001b[0m\n\u001b[0;31m    if x <= 20:\u001b[0m\n\u001b[0m    ^\u001b[0m\n\u001b[0;31mIndentationError\u001b[0m\u001b[0;31m:\u001b[0m expected an indented block after function definition on line 3\n"]}],"source":["import numpy as np\n","# Fuzzy membership functions\n","def membership_cold(x):\n","if x <= 20:\n","return 1.0\n","elif x > 20 and x < 25:\n","return (25 - x) / (25 - 20)\n","else:\n","return 0.0\n","def membership_moderate(x):\n","if x > 20 and x < 25:\n","return (x - 20) / (25 - 20)\n","elif x >= 25 and x <= 30:\n","return 1.0\n","elif x > 30 and x < 35:\n","return (35 - x) / (35 - 30)\n","else:\n","return 0.0\n","def membership_hot(x):\n","if x >= 30 and x <= 35:\n","return (x - 30) / (35 - 30)\n","elif x > 35:\n","return 1.0\n","else:\n","return 0.0\n","# Fuzzy inference using \"OR\" operator\n","def fuzzy_or(*args):\n","return max(args)\n","# Fuzzy inference using \"AND\" operator\n","def fuzzy_and(*args):\n","return min(args)\n","# Defuzzification using the centroid method\n","def defuzzification(result):\n","total_area = sum(result)\n","if total_area == 0:\n","return None\n","else:\n","return sum(i * result[i] for i in range(len(result))) /\n","total_area\n","# Fuzzy neuron for temperature control\n","def fuzzy_neuron(input_temp):\n","cold_value = membership_cold(input_temp)\n","moderate_value = membership_moderate(input_temp)\n","hot_value = membership_hot(input_temp)\n","# Rule-based fuzzy inference\n","air_cold = fuzzy_or(fuzzy_and(cold_value, fuzzy_or(fuzzy_and(1,\n","fuzzy_not(moderate_value)), fuzzy_and(1, fuzzy_not(hot_value)))),\n","fuzzy_and(moderate_value, fuzzy_or(fuzzy_and(1, fuzzy_not\n","(cold_value)), fuzzy_and(1, fuzzy_not(hot_value)))))\n","air_moderate = fuzzy_or(fuzzy_and(moderate_value, fuzzy_or\n","(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not\n","(hot_value)))),\n","fuzzy_and(hot_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)),\n","fuzzy_and(1, fuzzy_not(moderate_value)))))\n","air_hot = fuzzy_or(fuzzy_and(hot_value, fuzzy_or(fuzzy_and(1,\n","fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(moderate_value)))),\n","fuzzy_and(cold_value, fuzzy_or(fuzzy_and(1, fuzzy_not\n","(moderate_value)), fuzzy_and(1, fuzzy_not(hot_value)))))\n","# Defuzzification\n","result = [0] * 100\n","for i in range(100):\n","result[i] = fuzzy_or(air_cold * membership_cold(i),\n","air_moderate * membership_moderate(i), air_hot *\n","membership_hot(i))\n","return defuzzification(result)\n","# Helper function for \"NOT\" operator\n","def fuzzy_not(x):\n","return 1 - x\n","# Main function to demonstrate the fuzzy neuron\n","def main():\n","input_temp = 25 # Input temperature in degrees Celsius\n","# Fuzzy inference\n","air_conditioning = fuzzy_neuron(input_temp)\n","print(f\"Input Temperature: {input_temp}∘C\")\n","print(f\"Air Conditioning Output: {air_conditioning:.2f}\")\n","if __name__ == \"__main__\":\n","main()"]},{"cell_type":"code","source":["import numpy as np\n","\n","# Fuzzy membership functions\n","def membership_cold(x):\n","    if x <= 20:\n","        return 1.0\n","    elif 20 < x < 25:\n","        return (25 - x) / (25 - 20)\n","    else:\n","        return 0.0\n","\n","def membership_moderate(x):\n","    if 20 < x < 25:\n","        return (x - 20) / (25 - 20)\n","    elif 25 <= x <= 30:\n","        return 1.0\n","    elif 30 < x < 35:\n","        return (35 - x) / (35 - 30)\n","    else:\n","        return 0.0\n","\n","def membership_hot(x):\n","    if 30 <= x <= 35:\n","        return (x - 30) / (35 - 30)\n","    elif x > 35:\n","        return 1.0\n","    else:\n","        return 0.0\n","\n","# Fuzzy inference using \"OR\" operator\n","def fuzzy_or(*args):\n","    return max(args)\n","\n","# Fuzzy inference using \"AND\" operator\n","def fuzzy_and(*args):\n","    return min(args)\n","\n","# Defuzzification using the centroid method\n","def defuzzification(result):\n","    total_area = sum(result)\n","    if total_area == 0:\n","        return None\n","    else:\n","        return sum(i * result[i] for i in range(len(result))) / total_area\n","\n","# Fuzzy neuron for temperature control\n","def fuzzy_neuron(input_temp):\n","    cold_value = membership_cold(input_temp)\n","    moderate_value = membership_moderate(input_temp)\n","    hot_value = membership_hot(input_temp)\n","\n","    # Rule-based fuzzy inference\n","    air_cold = fuzzy_or(fuzzy_and(cold_value, fuzzy_or(fuzzy_and(1, fuzzy_not(moderate_value)), fuzzy_and(1, fuzzy_not(hot_value)))),\n","                        fuzzy_and(moderate_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(hot_value)))))\n","\n","    air_moderate = fuzzy_or(fuzzy_and(moderate_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(hot_value)))),\n","                            fuzzy_and(hot_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(moderate_value)))))\n","\n","    air_hot = fuzzy_or(fuzzy_and(hot_value, fuzzy_or(fuzzy_and(1, fuzzy_not(cold_value)), fuzzy_and(1, fuzzy_not(moderate_value)))),\n","                       fuzzy_and(cold_value, fuzzy_or(fuzzy_and(1, fuzzy_not(moderate_value)), fuzzy_and(1, fuzzy_not(hot_value)))))\n","\n","    # Defuzzification\n","    result = [0] * 100\n","    for i in range(100):\n","        result[i] = fuzzy_or(air_cold * membership_cold(i),\n","                             air_moderate * membership_moderate(i),\n","                             air_hot * membership_hot(i))\n","\n","    return defuzzification(result)\n","\n","# Helper function for \"NOT\" operator\n","def fuzzy_not(x):\n","    return 1 - x\n","\n","# Main function to demonstrate the fuzzy neuron\n","def main():\n","    input_temp = 25  # Input temperature in degrees Celsius\n","\n","    # Fuzzy inference\n","    air_conditioning = fuzzy_neuron(input_temp)\n","\n","    print(f\"Input Temperature: {input_temp}°C\")\n","    print(f\"Air Conditioning Output: {air_conditioning:.2f}\")\n","\n","if __name__ == \"__main__\":\n","    main()\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jx5ET20Y7_G-","executionInfo":{"status":"ok","timestamp":1731323762858,"user_tz":480,"elapsed":451,"user":{"displayName":"Pyrate","userId":"07126912247588804034"}},"outputId":"f4459d44-1b2c-42bb-e77e-c0e88b72bce3"},"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Input Temperature: 25°C\n","Air Conditioning Output: 15.79\n"]}]}]}